{"version":3,"sources":["components/DateView.js","components/DeleteEvent.js","components/AddEventForm.js","components/EditEventModal.js","pages/Main.js","index.js"],"names":["DateView","props","views","id","onClick","current","setCurrent","length","DeleteEvent","color","window","confirm","fetch","process","method","then","response","json","resData","deletedCount","handleEventRemoval","console","log","handleChange","AddEventForm","useState","eventName","setEventName","eventType","setEventType","eventDetails","setEventDetails","Date","eventDate","setEventDate","reminder","setReminder","classes","makeStyles","input","width","button","backgroundColor","boxShadow","height","margin","marginTop","useStyles","FormControl","variant","fullWidth","required","InputLabel","OutlinedInput","className","value","onChange","target","label","Select","labelId","MenuItem","TextField","multiline","rowsMax","DateTimePicker","date","animateYearScrolling","disablePast","inputVariant","component","formControl","FormControlLabel","control","Checkbox","checked","event","name","Button","startIcon","headers","body","JSON","stringify","res","newEvent","handleExpandedForm","eventMode","EditModal","open","setOpen","toggleModal","theme","paper","position","palette","background","border","shadows","padding","spacing","top","left","modal","editButton","Modal","onClose","aria-labelledby","aria-describedby","_id","modifiedCount","handleEdit","Main","events","setEvents","expanded","setExpanded","expandForm","setExpandForm","selected","getEvents","a","handleAlerts","isExpanded","forEach","moment","day","week","isoWeek","year","alert","useEffect","displayEvent","filter","isToday","isWeek","month","isMonth","format","isPast","sort","b","map","ExpansionPanel","key","ExpansionPanelSummary","expandIcon","aria-controls","eDate","toLocaleDateString","undefined","toLocaleTimeString","hour","minute","second","formatDate","ExpansionPanelDetails","EditEventModal","updatedEvent","indx","findIndex","el","splice","push","addNewEventState","ReactDOM","render","StrictMode","utils","MomentUtils","document","getElementById"],"mappings":"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","file":"static/js/main.b8b16136.chunk.js","sourcesContent":["import React from 'react';\nimport '../styling/date-view.css'\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst DateView = (props) => {\n    const views = ['Today', 'This Week', 'This Month', 'Past Events', 'All Events',];\n\n    const handleNext = () => {\n        if(props.current === views.length-1){\n            props.setCurrent(0)\n        } else {\n            props.setCurrent(props.current + 1)\n        };\n    };\n    const handlePrev = () => {\n        if(props.current === 0){\n            props.setCurrent(views.length - 1)\n        } else {\n            props.setCurrent(props.current - 1)\n        };\n    };\n\n\n    return(\n            <div id=\"date_view\">\n                <NavigateBeforeIcon id=\"before\" onClick={() => handlePrev()} />\n                <div id=\"view_display\">{views[props.current]}</div>\n                <NavigateNextIcon id=\"next\" onClick={() => handleNext()}/>\n            </div>\n    )\n};\n\nexport default DateView;","import React from 'react';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\nconst DeleteEvent = (props) => {\n\n    const handleDelete = () => {\n        if(window.confirm(\"Are you sure you want to remove this event?\")){\n            fetch(`${process.env.REACT_APP_API_URL}/api/events/${props.id}`,{\n                method: \"DELETE\"\n            }).then(response => response.json())\n            .then(resData => resData.deletedCount === 1 ? props.handleEventRemoval(props.id) : console.log(\"Could not delete\"))\n            .then(props.handleChange())\n        };\n    };\n\n    return (\n        <DeleteOutlinedIcon  color=\"error\" onClick={() =>{handleDelete()}}/>\n    )\n}\n\nexport default DeleteEvent;","import React, {useState} from 'react';\nimport '../styling/add-event-form.css';\n\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst AddEventForm = (props) => {\n\n    const [eventName, setEventName] = useState('');\n    const [eventType, setEventType] = useState('');\n    const [eventDetails, setEventDetails] = useState('');\n    const [eventDate, setEventDate] = useState(new Date());\n    const [reminder, setReminder] = useState(false);\n\n    const useStyles = makeStyles({\n        input: {\n          width: '98%',\n        },\n        button: {\n            backgroundColor: \"#6772e5\",\n            color: \"#fff\",\n            width: \"100%\",\n            boxShadow: \"0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n            height: \"60px\",\n            margin: \"0 auto\",\n            marginTop: \"15px\"\n        }\n      });\n\n    const handleDateChange = (date) => {\n        setEventDate(date);\n    };\n\n    const handleReminder = (event) => {\n        setReminder(event.target.checked)\n    };\n\n  function addNewEvent(){\n      fetch(`${process.env.REACT_APP_API_URL}/api/events`,{\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({eventName, eventType, eventDetails, eventDate, reminder})\n      })\n      .then(res => res.json())\n      .then(res => res)\n      .then(res => props.newEvent(res))\n      .then(setEventName(''),setEventType(''),setEventDetails(''),setEventDate(new Date()), setReminder(false))\n      .then(props.handleExpandedForm)\n  };\n\n  const classes = useStyles();\n    return (\n        <div id=\"add_event_form_container\">\n            <FormControl \n                variant=\"outlined\"\n                fullWidth={true}\n                required={true}>\n                <InputLabel >Event Name</InputLabel>\n                <OutlinedInput \n                    className={classes.input}\n                    id=\"component-outlined\" \n                    value={eventName} \n                    onChange={({target}) => setEventName(target.value)}\n                    label=\"eventName\" \n                    />\n            </FormControl>\n            <br/>\n\n            <FormControl \n                id=\"select_event_input\" \n                variant=\"outlined\" \n                fullWidth={true}\n                >\n                <InputLabel id=\"select_event_label\">Event Type</InputLabel>\n                <Select\n                    className={classes.input}\n                    labelId=\"select_event_label\"\n                    id=\"select_event\"\n                    value={eventType} \n                    onChange={({target}) => setEventType(target.value)}\n                    label=\"eventType\"\n                    >\n                <MenuItem value=\"\">\n                    <em>None</em>\n                </MenuItem>\n                <MenuItem value=\"event\">Event</MenuItem>\n                <MenuItem value=\"appointment\">Appointment</MenuItem>\n                <MenuItem value=\"reminder\">Reminder</MenuItem>\n                </Select>\n            </FormControl>\n\n            <FormControl \n                className={classes.input}\n                fullWidth={true}\n            >\n                <TextField\n                    fullWidth={true}\n                    \n                    // \n                    id=\"outlined-multiline-flexible\"\n                    label=\"Details\"\n                    multiline\n                    rowsMax={4}\n                    value={eventDetails} \n                    onChange={({target}) => setEventDetails(target.value)}\n                    variant=\"outlined\"\n                    />\n            </FormControl>\n\n            <FormControl \n            className={classes.input}\n                \n                >\n                <DateTimePicker\n                    fullWidth={true}\n                    label=\"Event Date\"\n                    value={eventDate}\n                    onChange={handleDateChange}\n                    animateYearScrolling\n                    disablePast={true}\n                    inputVariant=\"outlined\"\n                    />\n            </FormControl>\n\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormControlLabel\n                    control={\n                    <Checkbox\n                        checked={reminder}\n                        onChange={handleReminder}\n                        name=\"reminderB\"\n                        color=\"primary\"\n                    />\n                    }\n                    label=\"Set Reminder\"\n                />\n            </FormControl>\n\n            <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddIcon />}\n                onClick={() => addNewEvent()}\n            >{props.eventMode}\n            </Button>\n        </div>\n    )\n};\n\nexport default AddEventForm;","import React, {useState} from 'react';\n\nimport Modal from '@material-ui/core/Modal';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\n\nconst EditModal = (props) => {\n    const [open, setOpen] = useState(false);    \n    const [eventName, setEventName] = useState(props.event.eventName);\n    const [eventType, setEventType] = useState(props.event.eventType);\n    const [eventDetails, setEventDetails] = useState(props.event.eventDetails);\n    const [eventDate, setEventDate] = useState(props.event.eventDate);\n    const [reminder, setReminder] = useState(props.event.reminder);\n\n    const handleReminder = (event) => {\n        setReminder(event.target.checked)\n    };\n\n    const editEvent = () => {\n        fetch(`${process.env.REACT_APP_API_URL}/api/events/${props.event._id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({eventName, eventType, eventDetails, eventDate, reminder})\n        })\n        .then((res) => res.json())\n        .then(\n            resData => resData.modifiedCount === 1 ? \n            props.handleEdit(props.event._id, {eventName, eventType, eventDetails, eventDate, reminder})\n            : console.log(\"could not edit\"))\n        .then(() => toggleModal())\n        .then(props.handleChange())\n    };\n\n    // Delete this fx after presentation, just for show\n    const editViaPut = () => {\n        fetch(`${process.env.REACT_APP_API_URL}/api/events/${props.event._id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({eventName, eventType, eventDetails, eventDate, reminder})\n        })\n        .then((res) => res.json())\n        .then(\n            resData => resData.modifiedCount === 1 ? \n            props.handleEdit(props.event._id, {eventName, eventType, eventDetails, eventDate, reminder})\n            : console.log(\"could not edit\"))\n        .then(() => toggleModal())\n        .then(props.handleChange())\n    };\n\n    const handleDateChange = (date) => {\n        setEventDate(date);\n    };\n\n    const toggleModal = () => {\n        if(open){\n            setOpen(false);\n        } else {\n            setOpen(true)\n        };\n    };\n\n      \n    const useStyles = makeStyles((theme) => ({\n        paper: {\n          position: 'absolute',\n          width: 400,\n          backgroundColor: theme.palette.background.paper,\n          border: '2px solid #000',\n          boxShadow: theme.shadows[5],\n          padding: theme.spacing(2, 4, 3),\n          top: 100,\n          left: '37%',\n        },\n        button: {\n            margin: theme.spacing(2, 0, 2),\n          },\n        input: {\n            margin: theme.spacing(1,0,1),\n            width: \"98%\"\n        },\n        modal: {\n            marginTop: \"-40px\"\n        },\n        editButton: {\n            backgroundColor: \"#6772e5\",\n            color: \"#fff\",\n            width: \"100%\",\n            boxShadow: \"0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n            height: \"60px\",\n            margin: \"0 auto\",\n            marginTop: \"15px\"\n            // & :hover {\n            //     background-color: \"#5469d4\"\n        } \n      }));\n\n    const classes = useStyles();\n\n\n    return (\n        <div id=\"edit_modal_container\">\n            <EditOutlinedIcon onClick={toggleModal} />\n            <Modal\n                open={open}\n                onClose={toggleModal}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                className={classes.modal}\n                >\n\n                <div className={classes.paper} id=\"edit_modal\">\n                    <h2 id=\"simple-modal-title\">Edit Event</h2>\n                    <FormControl \n                        variant=\"outlined\"\n                        fullWidth={true}\n                        required={true}>\n                        <InputLabel>Event Name</InputLabel>\n                        <OutlinedInput \n                            className={classes.input}\n                            id=\"component-outlined\" \n                            value={eventName} \n                            onChange={({target}) => setEventName(target.value)}\n                            label=\"eventName\" \n                            />\n                    </FormControl>\n            <br/>\n\n                    <FormControl \n                        id=\"select_event_input\" \n                        variant=\"outlined\" \n                        fullWidth={true}\n                        >\n                        <InputLabel id=\"select_event_label\">Event Type</InputLabel>\n                        <Select\n                            className={classes.input}\n                            labelId=\"select_event_label\"\n                            id=\"select_event\"\n                            value={eventType} \n                            onChange={({target}) => setEventType(target.value)}\n                            label=\"eventType\"\n                            >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        <MenuItem value=\"event\">Event</MenuItem>\n                        <MenuItem value=\"appointment\">Appointment</MenuItem>\n                        <MenuItem value=\"reminder\">Reminder</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl \n                        className={classes.input}\n                        fullWidth={true}\n                    >\n                        <TextField\n                            fullWidth={true}\n                            id=\"outlined-multiline-flexible\"\n                            label=\"Details\"\n                            multiline\n                            rowsMax={4}\n                            value={eventDetails} \n                            onChange={({target}) => setEventDetails(target.value)}\n                            variant=\"outlined\"\n                            />\n                    </FormControl>\n\n                    <FormControl className={classes.input}>\n                        <DateTimePicker\n                            fullWidth={true}\n                            label=\"Event Date\"\n                            value={eventDate}\n                            onChange={handleDateChange}\n                            animateYearScrolling\n                            disablePast={true}\n                            inputVariant=\"outlined\"\n                            />\n                    </FormControl>\n\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormControlLabel\n                            control={\n                            <Checkbox\n                                checked={reminder}\n                                onChange={handleReminder}\n                                name=\"reminderB\"\n                                color=\"primary\"\n                            />\n                            }\n                            label=\"Set Reminder\"\n                        />\n                    </FormControl>\n\n                <Button\n                    className={classes.editButton}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<EditOutlinedIcon /> }\n                    onClick={() => editEvent()}\n                >Update via PATCH\n                </Button> \n\n{/* remove this button after presentation and remove \"via PATCH\" above */}\n                <Button\n                    className={classes.editButton}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<EditOutlinedIcon /> }\n                    onClick={() => editViaPut()}\n                >Update via PUT\n                </Button>                                                   \n                </div>\n\n\n            </Modal>\n        </div>\n    )\n};\n\nexport default EditModal;","import React, {useState, useEffect} from 'react';\nimport DateView from '../components/DateView';\nimport DeleteEvent from '../components/DeleteEvent';\nimport AddEventForm from '../components/AddEventForm';\nimport EditEventModal from '../components/EditEventModal';\nimport '../styling/main.css';\n\nimport moment from 'moment';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\n\nconst Main = () => {\n\n    const [events, setEvents] = useState([]);\n    const [expanded, setExpanded] = useState(false);\n    const [expandForm, setExpandForm] = useState(false);\n    const [current, setCurrent] = useState(0);\n    const [eventMode] = useState(\"Add Event\");\n    const [selected] = useState(\"\");\n\n    async function getEvents(){\n         await fetch(`https://events-scheduler.herokuapp.com/api/events`)\n        //  await fetch(`${process.env.REACT_APP_API_URL}/api/events`)\n            .then(res => res.json())\n            .then(res => {\n                setEvents(res);\n                handleAlerts(res);\n            })\n            .then(console.log(\"events \",events))\n    };\n\n\n    const handleChange = (id) => (event, isExpanded) => {\n        setExpanded(isExpanded ? id : false);\n      };\n\n    const handleExpandedForm = () => {\n        setExpandForm(expandForm ? false : true);\n    };\n    \n\n    function formatDate(eDate){\n        let date = new Date(eDate);\n        \n        let localDateString = date.toLocaleDateString(undefined, {  \n            day : 'numeric',\n            month : 'short',\n            year : 'numeric'\n        });\n        \n        let localTimeString = date.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        });\n        \n    return localDateString +\" \"+ localTimeString;\n\n    };\n\n    function handleAlerts(events){\n        events.forEach(event => {\n            if(event.reminder && moment(event.eventDate).day() === moment().day() && moment(event.eventDate).week() === moment().isoWeek() && moment(event.eventDate).year() === moment().year()){\n                alert(\"Dont forget! \"+ event.eventName)\n            };\n        }) \n    };\n\n    const logEvents = () => {console.log(\"events \", events)}\n\n    useEffect(() => {\n        getEvents();\n    }, []);\n\n    function isToday(date){\n      return moment(date).day() === moment().day() && moment(date).week() === moment().isoWeek() && moment(date).year() === moment().year();\n    };\n    function isWeek(date){\n      return moment(date).week() === moment().isoWeek() && moment(date).year() === moment().year();\n    };\n    function isMonth(date){\n      return moment(date).month() === moment().month() && moment(date).year() === moment().year();\n    };\n    function isPast(date){\n        return moment(date).format() < moment().format();\n      };\n\n    function addNewEventState(newEvent){\n        return events.push(newEvent);\n    };\n    function handleEventRemoval(id){\n        const indx = events.findIndex(el => el._id === id);\n        return events.splice(indx, 1)\n    };\n    function handleEdit(id, updatedEvent){\n        const indx = events.findIndex(el => el._id === id);\n        return events.splice(indx, 1, {_id:id, ...updatedEvent})\n    };\n\n  \n\n    const filtered = () => {\n        if(current === 0){\n            return events.filter(date => isToday(date.eventDate));\n          } else if(current === 1){\n            return events.filter(date => isWeek(date.eventDate));\n          } else if(current === 2){\n            return events.filter(date => isMonth(date.eventDate));\n          } else if(current === 3){\n              return events.filter(date => isPast(date.eventDate));\n          } else {\n              return events;\n          };\n    };\n    \n    const sorted = filtered().sort((a,b) => new Date(a.eventDate) - new Date(b.eventDate));\n\n    const displayEvent = sorted.map((event) => {\n        return  <ExpansionPanel \n                    expanded={expanded === event._id} \n                    onChange={handleChange(event._id)}\n                    key={event._id}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        \n                        <div  className=\"expansion-panel-summary\">\n                            <p className=\"event-name\">{event.eventName}</p>\n                            <p className={\"event-date\"}> {formatDate(event.eventDate)}</p>\n                        </div>\n                        {event.reminder === true ? <AlarmOnIcon className=\"alarm\"/> : \"\"}\n\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails >\n\n                        <div className=\"expansion-panel-details\">\n                            <div className=\"event-info\">\n                                <p className=\"event-details\" >{event.eventDetails}</p>\n                            </div>\n                            <div className=\"event-functions\">\n                                <EditEventModal \n                                    event={event}\n                                    handleEdit={(id, updatedEvent) => handleEdit(id, updatedEvent)}\n                                    handleChange={handleChange} \n                                />\n                                <DeleteEvent \n                                    id={event._id} \n                                    handleEventRemoval={(id) => handleEventRemoval(id)}\n                                    event={event}\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </div>\n\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n  \n    })\n\n    return (\n        <div id=\"main_container\">\n            <DateView \n                setCurrent={setCurrent}\n                current={current}\n                />\n\n            {displayEvent}\n\n\n            <ExpansionPanel expanded={expandForm}>\n                    <ExpansionPanelSummary\n                        onClick={handleExpandedForm}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"add_event_panel_summary\"\n                        >\n                        <div >\n                            <p id=\"add_event_btn\">+Add Event</p>\n                        </div>\n                    </ExpansionPanelSummary>\n\n                    <ExpansionPanelDetails>\n                        <AddEventForm \n                            getEvents={getEvents} \n                            eventMode={eventMode} \n                            newEvent={(event) => addNewEventState(event)}\n                            selected={selected} \n                            handleExpandedForm={handleExpandedForm}/>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n        </div>\n    )\n};\n\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './pages/Main';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Main />\n    </MuiPickersUtilsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}